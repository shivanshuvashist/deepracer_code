import matplotlib.pyplot as plt
import numpy as np
import math

def substitute_spikes(data, window_size=5, threshold=2):
    filtered_data = data.copy()
    for i in range(len(filtered_data)):
        lower_bound = max(0, i - window_size // 2)
        upper_bound = min(len(filtered_data), i + window_size // 2 + 1)
        window = filtered_data[lower_bound:upper_bound]
        if i == 0 or i == len(filtered_data) - 1:
            continue
        slope_left = (window[0] - filtered_data[i-1]) / window_size
        slope_right = (filtered_data[i+1] - window[-1]) / window_size
        slope = (slope_left + slope_right) / 2
        if abs(filtered_data[i] - window[window_size // 2]) > threshold * abs(slope):
            filtered_data[i] = window[window_size // 2] + slope
    return filtered_data
    
def detect_sudden_changes(data):
    """
    Detect sudden changes in sign or value of the entries in the given data.
    
    Parameters:
    - data: List or numpy array containing the data.
    
    Returns:
    - List of indices of anomalies.
    """
    anomaly_value = []
    anomalies = []
    n = len(data)
    for i in range(1, n):
        if data[i] * data[i - 1] < 0:
            anomalies.append(i)
            anomaly_value.append(data[i])
    return anomalies, anomaly_value
    
def remove_spikes(data, window_size=5, threshold=2):
    filtered_data = []
    for i in range(len(data)):
        lower_bound = max(0, i - window_size // 2)
        upper_bound = min(len(data), i + window_size // 2 + 1)
        window = data[lower_bound:upper_bound]
        median_val = np.median(window)
        if abs(data[i] - median_val) < threshold:
            filtered_data.append(data[i])
        else:
            filtered_data.append(median_val)
    return filtered_data

def remove_spikes_itr(data, threshold=2):
    filtered_data = data.copy()
    while True:
        spikes_removed = False
        for i in range(1, len(filtered_data) - 1):
            if abs(filtered_data[i] - (filtered_data[i-1] + filtered_data[i+1]) / 2) > threshold:
                filtered_data.pop(i)
                spikes_removed = True
                break
        if not spikes_removed:
            break
    return filtered_data

def remove_spikes_iqr(data, threshold=1.5):
    q1, q3 = np.percentile(data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - threshold * iqr
    upper_bound = q3 + threshold * iqr
    filtered_data = [x for x in data if lower_bound <= x <= upper_bound]
    return filtered_data
    
def calculate_racing_line(waypoints):
    racing_line = []
    angle_list = []
    for i in range(len(waypoints)):
        if i == 0 or i == len(waypoints) - 1:
            # Start and end points stay the same
            racing_line.append(waypoints[i])
        else:
            prev_point = waypoints[i - 1]
            current_point = waypoints[i]
            next_point = waypoints[i + 1]
            
            # Calculate direction vectors
            vector_a = np.array(current_point) - np.array(prev_point)
            vector_b = np.array(next_point) - np.array(current_point)
            
            # Calculate angles
            angle = np.arctan2(vector_b[1], vector_b[0]) - np.arctan2(vector_a[1], vector_a[0])
            angle = np.degrees(angle)
            
            angle_list.append(angle)
            # Adjust point slightly towards the inside of the curve
            
            if angle > 0:
                adjusted_point = (
                    current_point[0] - 0.1 * (current_point[0] - prev_point[0]),
                    current_point[1] - 0.1 * (current_point[1] - prev_point[1])
                )
            else:
                adjusted_point = (
                    current_point[0] + 0.1 * (next_point[0] - current_point[0]),
                    current_point[1] + 0.1 * (next_point[1] - current_point[1])
                )
            racing_line.append(adjusted_point)
    
    # Find anomalies in the data
    anomalies, anomaly_value = detect_sudden_changes(angle_list)
    
    filtered_list = substitute_spikes(angle_list,5,3)
    
    print("FILTERED:", filtered_list)
    
    for (i, anomaly) in enumerate(anomalies):
#        print("racing_line 1:", racing_line[anomaly])
#        print("racing_line 2:", racing_line[anomaly+1])
        racing_line[anomaly] = racing_line[anomaly+1]
        
#    print("Anomalies:", anomalies)
#    print("Anomaly Val:", anomaly_value)
    return racing_line, angle_list, anomalies
    
# First set of x and y coordinates
waypoints = [(0.01685067967659376, 1.1330461167634183), (0.10454194992780445, 1.037076115608218), (0.19108544565858432, 0.9400698099023651), (0.3063818905502558, 0.8108344227075577), (0.5076930373907089, 0.584124356508255), (0.7088999003171921, 0.3573188427835703), (0.9101405441761017, 0.13054199516773224), (1.1109170317649841, -0.09663845598697662), (1.3109925091266632, -0.3244275604374707), (1.510398030281067, -0.5527989640831947), (1.7115260362625122, -0.779676765203476), (1.9158819317817688, -1.0037544667720795), (2.127041459083557, -1.2212917506694794), (2.35785448551178, -1.4178684949874878), (2.6153459548950195, -1.5775030255317688), (2.9020979404449463, -1.6740959882736206), (3.192330002784729, -1.7584999799728394), (3.410485029220581, -1.9660694599151611), (3.5636454820632935, -2.2276010513305664), (3.6904104948043823, -2.5030659437179565), (3.802172064781189, -2.7848669290542603), (3.8883113861083984, -3.075444459915161), (3.9256519079208374, -3.3758625984191895), (3.857689619064331, -3.6687514781951904), (3.628520965576172, -3.8595250844955444), (3.3312785625457764, -3.9159170389175415), (3.0283209085464478, -3.9232853651046753), (2.7338016033172643, -3.858665585517884), (2.5047554969787598, -3.663868546485901), (2.3042269945144653, -3.436737537384033), (2.0655285716056824, -3.250208020210266), (1.7853264808654785, -3.1376020908355713), (1.4848524928092957, -3.1510039567947388), (1.2191407084465027, -3.29349946975708), (1.0140118598937988, -3.5154515504837036), (0.7995970845222473, -3.7257325649261475), (0.5195947587490082, -3.8406310081481934), (0.22013694792985916, -3.8849860429763794), (-0.0791160985827446, -3.842719554901123), (-0.32070594653487206, -3.665432929992676), (-0.40669136866927147, -3.3779269456863403), (-0.3660818636417389, -3.077723979949951), (-0.2731740474700928, -2.7888084650039673), (-0.1811501830816269, -2.4999635219573975), (-0.10437200963497162, -2.2066839933395386), (-0.05370424687862396, -1.9078789949417114), (-0.04975371062755585, -1.6051074862480164), (-0.12047268450260162, -1.3112254738807678), (-0.27104945853352547, -1.048856794834137), (-0.47022343426942825, -0.8207091391086578), (-0.7124057114124298, -0.6395276188850403), (-0.9999120831489563, -0.5500769801437855), (-1.2934255003929138, -0.6115724742412567), (-1.5459460020065308, -0.779325932264328), (-1.7553704977035522, -0.99831223487854), (-1.9025014638900757, -1.2629244923591614), (-1.9807295203208923, -1.5556524991989136), (-2.0042914748191833, -1.8578130006790161), (-1.9950765371322632, -2.160830020904541), (-1.9745920300483704, -2.4633378982543945), (-1.9683764576911926, -2.766396999359131), (-2.017058491706848, -3.0650094747543335), (-2.14520400762558, -3.339360475540161), (-2.316781997680664, -3.588989496231079), (-2.539884567260742, -3.7932724952697754), (-2.822121500968933, -3.8981685638427734), (-3.1190404891967773, -3.8501704931259155), (-3.3754725456237793, -3.6891149282455444), (-3.591495990753174, -3.4761509895324707), (-3.759330630302429, -3.2240179777145386), (-3.855846643447876, -2.936893939971924), (-3.894473910331726, -2.636250495910644), (-3.891848087310791, -2.3330575227737427), (-3.85984206199646, -2.0315550565719604), (-3.8061275482177734, -1.7331575155258179), (-3.735764503479004, -1.4382449984550476), (-3.6522023677825928, -1.1467989683151245), (-3.5579434633255005, -0.8586345314979553), (-3.4547725915908813, -0.5735454112291336), (-3.343720555305481, -0.29143815487623215), (-3.2113959789276123, -0.018747098743915558), (-3.058645009994507, 0.24312346291844733), (-2.9001810550689697, 0.501609206199646), (-2.758821964263916, 0.7696676254272461), (-2.6881719827651978, 1.0627945065498352), (-2.774464964866638, 1.349343478679657), (-3.0156389474868774, 1.5270600318908691), (-3.304600954055786, 1.6183845400810242), (-3.5905039310455322, 1.7184150218963623), (-3.8185924291610718, 1.9130929708480835), (-3.903972029685974, 2.20158052444458), (-3.920802593231201, 2.5043104887008667), (-3.92767596244812, 2.807428002357483), (-3.9173271656036377, 3.1104239225387573), (-3.873715877532959, 3.4103184938430786), (-3.758816957473755, 3.6895145177841187), (-3.5244959592819214, 3.875788450241089), (-3.2266565561294556, 3.927023410797119), (-2.9241185188293457, 3.908042550086975), (-2.62819242477417, 3.8442219495773315), (-2.3569549322128296, 3.71036159992218), (-2.1209999322891235, 3.520527482032776), (-1.9106189608573914, 3.3023040294647217), (-1.7090685367584229, 3.0758060216903687), (-1.5080680251121545, 2.8488199710845974), (-1.3072496354579926, 2.621672511100769), (-1.1063501834869385, 2.3945975303649902), (-0.9053516983985901, 2.167609930038452), (-0.7042564749717712, 1.9407075643539429), (-0.503077358007431, 1.7138790488243103), (-0.30175267718732357, 1.4871800541877747), (-0.09996715188026428, 1.2608924508094788), (0.01685067967659376, 1.1330461167634183)]

print("waypoints length:", len(waypoints))

#racing_line = [(0.01685067967659376, 1.1330461167634183), (0.11752347428742144, 1.02252516975234), (0.17810392129896735, 0.954620755758243), (0.33657856257632374, 0.7768279127776623), (0.5378740668296814, 0.5501035294495523), (0.6787188708782196, 0.391339669842273), (0.940257017314434, 0.09646492749452591), (1.140928353369236, -0.13080682165455074), (1.3409033372998238, -0.3586832709843293), (1.4804872021079063, -0.5185432535363361), (1.6813568353652955, -0.7456450950354337), (1.8852285474538804, -0.9701428115367889), (2.095367529988289, -1.1886611580848694), (2.3232325315475464, -1.3883819833397866), (2.5767222344875336, -1.5535578459501267), (2.8590851426124573, -1.659607043862343), (3.225053256750107, -1.7896354019641876), (3.433459097146988, -2.0052991986274717), (3.582660233974457, -2.268920785188675), (3.7071747303009035, -2.545336091518402), (3.8150929629802706, -2.828453558683395), (3.8939124643802643, -3.1205071806907654), (3.9154575645923613, -3.4197959303855896), (3.8233143210411074, -3.6973675191402435), (3.5839346051216125, -3.867983877658844), (3.285834914445877, -3.9170222878456116), (3.073764556646347, -3.9221801161766052), (2.699444687366489, -3.8294460296630866), (2.4746762216091156, -3.629798895120621), (2.3343062698841095, -3.4708071887493133), (2.101333335042, -3.278187447786331), (1.740255382657051, -3.1396123707294463), (1.5299235910177231, -3.1489936769008637), (1.2589974761009217, -3.2721251428127287), (0.9818496435880661, -3.54699370265007), (0.7575967356562614, -3.7429673314094543), (0.47467608712613585, -3.8472842633724214), (0.2650556195527315, -3.8783327877521514), (-0.11535457577556371, -3.816126561164856), (-0.333603759855032, -3.6223070323467255), (-0.40059994291514156, -3.332896500825882), (-0.352145691215992, -3.0343866527080534), (-0.2871102198958397, -2.832145792245865), (-0.19495376273989679, -2.543290263414383), (-0.11588873565196992, -2.2506759226322175), (-0.06130441129207611, -1.9526997447013854), (-0.05034629106521606, -1.6505232125520706), (-0.10986483842134476, -1.3553077757358551), (-0.2484629424288869, -1.0882120966911315), (-0.44034733790904285, -0.8549312874674797), (-0.6760783698409796, -0.6667048469185829), (-1.0439390957355499, -0.5593013042584062), (-1.2493984878063202, -0.602348150126636), (-1.5080679267644883, -0.7541629135608673), (-1.723956823348999, -0.9654642894864083), (-1.8804318189620972, -1.2232326537370681), (-1.9689953118562697, -1.5117432981729508), (-2.0007571816444396, -1.8124889254570007), (-1.9964587777853011, -2.1153774678707125), (-1.9736596941947937, -2.508796763420105), (-1.975678762793541, -2.811188870668411), (-2.036280319094658, -3.1061621248722076), (-2.1709407061338424, -3.376804828643799), (-2.350247383117676, -3.6196319460868835), (-2.582220107316971, -3.809006905555725), (-2.7797859609127045, -3.8824341535568236), (-3.1575052976608275, -3.8260121583938598), (-3.4078760623931883, -3.6571703374385836), (-3.6166711866855623, -3.438331037759781), (-3.773808032274246, -3.1809493720531465), (-3.8616407334804537, -2.891797423362732), (-3.8940800368785857, -2.5907715499401087), (-3.8870471835136415, -2.2878321528434755), (-3.851784884929657, -1.986795425415039), (-3.795573091506958, -1.6889206379652024), (-3.7232301831245422, -1.3945280939340592), (-3.638063532114029, -1.103574302792549), (-3.5424678325653076, -0.8158711634576321), (-3.438114786148071, -0.5312293227761984), (-3.3238718688488005, -0.25053449645638465), (-3.1884833335876466, 0.020533485505438875), (-3.034875416755676, 0.2818963244106271), (-2.9239506483078004, 0.4628363447074662), (-2.780025827884674, 0.7294588625431061), (-2.6987694799900055, 1.0188254743814469), (-2.761521017551422, 1.3063611328601836), (-2.9794628500938414, 1.5004025489091872), (-3.347486400604248, 1.6333891123533248), (-3.624717205762863, 1.7476167142391206), (-3.831399369239807, 1.956366103887558), (-3.906496614217758, 2.246990019083023), (-3.921833598613739, 2.5497781157493593), (-3.9261236429214477, 2.8528773903846742), (-3.910785472393036, 3.1554081082344054), (-3.8564810395240783, 3.4521978974342344), (-3.7236688077449798, 3.7174556076526644), (-3.4798200488090516, 3.8834736943244934), (-3.181275850534439, 3.9241762816905976), (-2.8797296047210694, 3.8984694600105287), (-2.587506800889969, 3.8241428971290587), (-2.3215616822242735, 3.6818864822387694), (-2.089442786574364, 3.487793964147568), (-1.880386397242546, 3.268329328298569), (-1.6789184600114826, 3.041758114099503), (-1.4779452666640303, 2.8147478520870233), (-1.3373723939061168, 2.655744630098343), (-1.1364851012825965, 2.428658777475357), (-0.9355014711618423, 2.201658070087433), (-0.734420758485794, 1.9747429192066193), (-0.533254225552082, 1.747903326153755), (-0.3319513793103397, 1.521184903383255), (-0.13023498067632316, 1.294835591316223), (0.01685067967659376, 1.1330461167634183)]


racing_line, angle_list, anomalies = calculate_racing_line(waypoints)

#racing_line, angle_list, anomalies = calculate_racing_line(racing_line)

test_data = [(0.11139399833864900,1.0295700792987900),(0.11128743225483600,1.0296938078270300),(0.11944750138139400,1.0176659918446200),(0.1357050569642960,0.997817119244872),(0.16223226109849000,0.9703955860110310),(0.18155520389796400,0.918105467241361),(0.18972944685457000,0.8829476138272780),(0.21625427982256300,0.792839274873799),(0.24275507903587300,0.7134209140791990),(0.26561119796471100,0.62920916393562),(0.30631355901459700,0.5401536010580600),(0.37607803414537500,0.44701776419372200),(0.3876767739042840,0.43282870251636800),(0.4587342883705490,0.35449868741591900),(0.4864486603890010,0.331863844898313),(0.5425100384582870,0.27463538253964600),(0.5915715257584390,0.20283566489851800),(0.6124805401776610,0.1695318174490670),(0.6727505429692030,0.10678480729906900),(0.6971262377000190,0.08300657699750600),(0.747481037248822,0.018155545282710900),(0.7553317739427310,0.008176406205748900),(0.8090567035655520,-0.11357354420568900),(0.8290860412130310,-0.17966724909335900),(0.8690879154008030,-0.26054486336874900),(0.9013092342020540,-0.3228488933397430),(0.928960335148283,-0.37508049312661500),(0.9615965824281920,-0.41919810686845600),(1.0100593909948400,-0.46474980413377600),(1.0743907053433000,-0.5056870488955530),(1.1530006480946100,-0.5394684070322510),(1.1972364289108000,-0.5508987637013040),(1.3251790921207000,-0.5919647710925230),(1.371250672382250,-0.6132852645155380),(1.4948009476512300,-0.662773752559532),(1.5614925068777200,-0.6924038805047600),(1.7029264385229100,-0.7496771965575550),(1.7940166343434300,-0.7808811667469020),(1.9386689533246700,-0.8579347442219930),(1.9889138806661000,-0.886990702486096),(2.085531698194450,-0.957464172848207),(2.13558877173501,-1.0033364810701000),(2.2026062815879300,-1.0923299501384200),(2.2705495450268200,-1.1948312411628100),(2.3081420685038000,-1.2411863708266700),(2.4495218649017900,-1.3708300392706200),(2.5042050696834800,-1.4115998819316700),(2.6814758674919200,-1.535258824304740),(2.7601905769205800,-1.5800239209673200),(2.9540907165298800,-1.692472255025320),(3.022438140656350,-1.7404524448010400),(3.204605223903250,-1.8881523864207500),(3.295015606481830,-1.9814551499401300),(3.437646411289760,-2.157437887426480),(3.5509279546686200,-2.327246632146070),(3.584282709724350,-2.3807536737235300),(3.6973849709516400,-2.597343756296170),(3.7688296858443000,-2.782759515567050),(3.805963713145850,-2.8799422663867900),(3.9122107029716200,-3.0918847122457100),(3.9666540167834000,-3.183717067371710),(4.074053900321800,-3.3954196800416900),(4.139157095456140,-3.5368626133676300),(4.2233729485826000,-3.7034451857061300),(4.305571793737070,-3.91368428486769),(4.363483552393720,-4.071884765017760)]
speed_data = [1.882897943971560,2.6670577422976600,3.2,2.5236881879918000,1.079115777387770,1.8097130959102900,2.042308008250680,2.7904923006061500,1.5471485511902000,3.2,0.547049407580567,0.5,0.5,3.2,3.2,0.6861207599641230,2.7711490844171100,0.5,2.0904782397284700,0.8101125189364670,1.9427292604264000,2.184894313280900,3.177466253569080,0.5,0.5,0.5,0.8207850013640270,2.208748704304180,1.356520173631520,0.6970664402210520,1.3179697803799800,2.9067943959157600,0.7228026869867740,2.2952790383134900,1.7053068273244100,2.380361560245500,3.1344918557910700,0.6784129549164540,0.8279497663542480,0.5,3.2,2.8777000268247800,3.1397662923045500,3.2,2.7029889245002900,0.5,2.7690123502531400,3.2,2.5468624704996500,1.8295823875787000,3.2,3.2,3.2,1.7686653876612000,3.2,3.2,1.7002463507576500,2.739644529107200,3.2,1.2731620176452700,3.094194656630220,3.2,3.2,3.2,2.321740633582740,3.2]

tx = [point[0] for point in test_data]
ty = [point[1] for point in test_data]
dist_List = []
dist_rew_list = []
speed_rew_list = []
# Find the closest point on the racing line
min_dist = float('inf')
closest_racing_point = None
cnt = 0

track_width = 0.9499844805038961
SPEED_THRESHOLD = 3.0

for cnt in range(len(test_data)):
    min_dist = float('inf')
    closest_racing_point = None
    for point in racing_line:
        if(cnt<len(test_data)-1):
            dist = math.sqrt((tx[cnt] - point[0]) ** 2 + (ty[cnt] - point[1]) ** 2)
            if dist < min_dist:
                min_dist = dist
                closest_racing_point = point
    dist_List.append(min_dist)
    distance_reward = 1.0 - min_dist / (track_width * 0.3)
    dist_rew_list.append(distance_reward)

for speed in speed_data:
    if speed > SPEED_THRESHOLD:
        speed_reward = 2.0  # Higher reward for exceeding the speed threshold
    else:
        speed_reward = speed / SPEED_THRESHOLD  # Proportional reward up to the threshold
    speed_rew_list.append(speed_reward)

print("racing_line ", racing_line)
# Plot both sets of points
plt.figure(figsize=(8, 6))
# Fit a polynomial to the lookahead points
x1 = [point[0] for point in waypoints]
y1 = [point[1] for point in waypoints]

x2 = [point[0] for point in racing_line]
y2 = [point[1] for point in racing_line]
    
plt.plot(x1, y1, marker='o', linestyle='-',linewidth=0.5, label='Waypoints 1')
plt.plot(x2, y2, marker='x', linestyle='--',linewidth=0.5, color='r', label='Waypoints 2')

for (i, label) in enumerate(angle_list):
    current_angle = abs(angle_list[int(1.23)])
#    print("current_angle", current_angle)
    plt.text(x1[i], y1[i], label, fontsize=8, ha='right', va='bottom')

for (i, anomaly) in enumerate(anomalies):
    xa = x1[anomaly]
    ya = y1[anomaly]
    
    plt.text(xa, ya, anomaly, fontsize=15, ha='left', va='bottom')

#for (j, md) in enumerate(dist_List):
#    if (j<len(dist_List)-1):
#        xa = x1[j]
#        ya = y1[j]
#        
#        plt.text(xa, ya, md, fontsize=5, ha='left', va='top')
#        plt.text(xa, ya, dist_rew_list[j], fontsize=5, ha='right', va='top')
#        plt.text(xa, ya, speed_rew_list[j], fontsize=5,color='b', ha='left', va='bottom')

plt.title('Waypoints Plot')
plt.xlabel('X Coordinates')
plt.ylabel('Y Coordinates')
plt.legend()
plt.grid(True)
plt.show()

